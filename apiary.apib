FORMAT: 1A
HOST: http://www.google.com

# TeamMachine API v0.3
Team Machine API Specification

<table>
<tr><th align="left">
        Version</th><th align="left">
                       Description</th></tr>
<tr><td valign="top">
        0.3.1</td> <td>Added "Role" endpoint; removed updated/created from
                       <code>PUT</code> requests and updated description of
                       updated/created in several places to clarify that these are
                       assigned/modified by the server and not required to be sent
                       by the client in <code>PUT</code> requests</td></tr>
<tr><td valign="top">
        0.3</td>   <td>Removing Request Bodies (Get/Delete); Updating Search Params;
                       adding name/id to proj. owner, various updates</td></tr>
<tr><td valign="top">
        0.2</td>   <td>Initial Build Release</td></tr>
<tr><td valign="top">
        0.1</td>   <td>Creation of Apiary Project</td></tr>
</table>


# Group Root
Resources of the **Projects API**

## TeamMachine API [../]
+ The API Entry point - Main node;
+ No attributes - No Affordances
+ API Definition

#### Definitions:
+ Attributes: Stored properties of the URI
+ Affordances: These are functions used as HTTP requests (client &rarr; server):
+ Search Parameters: Used to query server to search DB



# Group Users

## User Collection [/users]
+ Root collection of all users

### Attributes
<table>
<tr><th align="left">
        Name</th><th align="left">
                           Description</th></tr>
<tr><td>id</td>        <td>ID of user (<em>server assigned on create</em>)</td></tr>
<tr><td>firstName</td> <td>user first name</td></tr>
<tr><td>lastName</td>  <td>user last name</td></tr>
<tr><td>email</td>     <td>user registered email</td></tr>
<tr><td>location</td>  <td>user location</td></tr>
<tr><td>skillset</td>  <td>set of user skills</td></tr>
<tr><td>picture</td>   <td>path to image on filesystem or reserved literal <code>#GRAVATAR</code></td></tr>
<tr><td>projects</td>  <td>projects user is involved in currently</td></tr>
<tr><td>bio</td>       <td>short profile bio</td></tr>
<tr><td>status</td>    <td>status a user</td></tr>
<tr><td>prevProj</td>  <td>previous projects user been involved in</td></tr>
</table>

### Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... search for user(s) with query parameters (Returns [id, firstName, lastName, picture, location, skillset])
+ 'POST' ... Create a new user

###Search Parameters
Search is accomplished by including a hash in the query params called *search*. This hash contains key value pairs where the key is the name of the filter to use and the value is the value to filter on.
below are the filter names. DO NOT use quotes around values.

* Parameters -- Append `?search[filter_name]=value&search[another_filter]=anothervalue` to URI
    * firstname_like (optional, string, `John`) ... search users by first name containing `John`
    * lastName_like (optional, string, `Mots`) ... search users by last name containing `Mots`
    * email_like (optional, string, `mots@john.com`) ... search users by email containing `mots@john.com`
    * location_like (optional, string, `Cincinnati`) ... search users by location containing `Cincinnati`
    * skill_like (optional, string, `Android`) ... search users by a skill containing `Android`
    * projects_like (optional, string, `Lasers`) ... search users by active projects containing `Lasers`
    * prevProjects_like (optional, string, `suchAProject`) ... search users by previous projects containing `suchAProject`

### Get all users base info - Intended for use with search [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "firstName": "Nick",
            "lastName": "Malott",
            "picture": "/images/123.jpg",
            "location": "Cincinnati",
            "skillset": [
                "lasers",
                "cannons",
                "lasercannons",
                "popcorn"
            ]
        },
        {
            "id": 2,
            "firstName": "Matt",
            "lastName": "Joe",
            "picture": "/images/3123.jpg",
            "location": "Chicaaaaaaago",
            "skillset": [
                "toilet economics"
            ]
        },
        {
            "id": 43,
            "firstName": "Mick",
            "lastName": "Jagger",
            "picture": "/images/3.jpg",
            "location": "Hell",
            "skillset": [
                "Tofu",
                "Not Tofu"
            ]
        },
        {
            "id": 4333,
            "firstName": "John",
            "lastName": "Jacob",
            "picture": "/images/123.jpg",
            "location": "Jingle",
            "skillset": [
                "Heimer",
                "Schmidt"
            ]
        }
        
### Create a new user [POST]
+ Request

        {
            "firstName": "John",
            "lastName": "Jacob",
            "picture": "/images/123.jpg",
            "location": "Jingle",
            "skillset": [
                "Heimer",
                "Schmidt"
            ]
        }

+ Response 201 (application/json)

        {
            "id": 4333
        }
        

## Individual User [/users/{id}]

### Attributes
<table>
<tr><th align="left">
        Name</th><th align="left">
                           Description</th></tr>
<tr><td>id</td>        <td>ID of user (<em>server assigned on create</em>)</td></tr>
<tr><td>firstName</td> <td>user first name</td></tr>
<tr><td>lastName</td>  <td>user last name</td></tr>
<tr><td>email</td>     <td>user registered email</td></tr>
<tr><td>location</td>  <td>user location</td></tr>
<tr><td>skillset</td>  <td>set of user skills</td></tr>
<tr><td>picture</td>   <td>path to image on filesystem or reserved literal <code>#GRAVATAR</code></td></tr>
<tr><td>projects</td>  <td>projects user is involved in currently</td></tr>
<tr><td>bio</td>       <td>short profile bio</td></tr>
<tr><td>status</td>    <td>status a user</td></tr>
<tr><td>prevProj</td>  <td>previous projects user been involved in</td></tr>
</table>


### Affordances
+ These are functions used as HTTP requests (client &rarr; server):
+ 'GET' ... Retrieve a user
+ 'PUT' ... Update a user
+ 'DELETE' ... Delete a user

+ Parameters
    + id (required, int, `1`) ... id of the user to retrieve

        
### Retrieve a single user [GET]
+ Response 200 (application/json)

        {
            "id": 4,
            "firstName": "nick",
            "lastName": "malott",
            "email":"n@m.co",
            "location":"?",
            "skillset":["lasers","cannons","Lasercannons","kitten cannons","Canonical References"],
            "picture":"/images/123.jpg",
            "projects":[1,2,3],
            "bio":"thisisabio",
            "status":"Looking",
            "prevProj":[4,5]
        }
        
### Delete a user by id [DELETE]
+ Response 202 (application/json)

### Update a user by id [PUT]
+ Request
    
        {
            "id": 1,
            "firstName": "nick",
            "lastName": "malott",
            "email":"n@m.co",
            "location":"?",
            "skillset":["lasers","cannons","Lasercannons","kitten cannons","Canonical References"],
            "picture":"/images/123.jpg",
            "projects":[1,2,3],
            "bio":"thisisabio",
            "status":"Working, bruh",
            "prevProj":[4,5]
        }

+ Response 202 (application/json)


# Group Skills

## Skills Collection [/skills]
Master list of all skills

###Attributes
Same as [Skill](#Skill) API below.

###Affordances
+ These are functions used as HTTP requests (client &rarr; server):
+ 'GET' ... retrieve all skills - used for search
+ 'POST' ... Add a skill

###Search Parameters
Search is accomplished by including a hash in the query params called *search*. This hash contains key value pairs where the key is the name of the filter to use and the value is the value to filter on.
below are the filter names. DO NOT use quotes around values.

* Parameters -- Append `?search[filter_name]=value&search[another_filter]=anothervalue` to URI
    * skill_like (optional, string, `Android') ... search skills by skill name containing 'Android'

### Get all skills - Used for search [GET]
+ Response 200 (application/json)
    
        {
            {
                "id":229,
                "name":"Android UI Development",
                "description": "Development of custom screens for Android applications"
            },
            {
                "id":22894,
                "name":"Karate",
                "description": "Kicking and screaming",
            }
        }

### Create a new Skill [POST]
+ Request (application/json)

        {
            "name":"Lasers",
            "description": "Lasers and stuff"
        }

+ Response 200 (application/json)
    
        {
            "id":209"
        }



## Skill [/skills/{id}]
Individual skill within collection of all skills

###Attributes
<table>
<tr><th align="left">
        Name</th><th align="left">
                             Description</th></tr>
<tr><td>id</td>          <td>ID of skill (<em>server assigned on create</em>)</td></tr>
<tr><td>name</td>        <td>name of skill</td></tr>
<tr><td>description</td> <td>description of skill</td></tr>
</table>

###Affordances
+ These are functions used as HTTP requests (client &rarr; server):
+ 'GET' ... retrieve a single skill

+ Parameters
    + id (optional, int, `1`) ... id of the skill

            
### Retrieve a single Skill [GET]
+ Response 200 (application/json)

        {
            "id":344,
            "name":"Android UI Development",
            "description": "Development of custom screens for Android applications"
        }



# Group Projects

## Project Collection [/projects]
All projects are stored here with unique identifiers

### Attributes
Same as [Project](#Project) API below.

###Affordances
+ These are functions used as HTTP requests (client &rarr; server):
+ 'GET' ... Get all projects - Used for search

###Search Parameters
Search is accomplished by including a hash in the query params called *search*. This hash contains key value pairs where the key is the name of the filter to use and the value is the value to filter on.
below are the filter names. DO NOT use quotes around values.

* Parameters -- Append `?search[filter_name]=value&search[another_filter]=anothervalue` to URI
    * name_like (optional, string, `Kitten`) ... search for projects whose name contains `Kitten`
    * subName_like (optional, string, `Kitten`) ... search projects who name contains `Kitten`
    * updated_since (optional, string, `2014-07-10T18:38:34.389Z`) ... search for projects whose last updated date is after `2014-07-10T18:38:34.389Z`
    * owner_id_is (optional, string, `1`) ... search projects whose owner id is `1`

### Get all projects - Used for search [GET]
+ Response 200 (application/json)

        [
            {
                "id":2,
                "name": "ThisIsMyProj",
                "subName": "AndSubname",
                "description":"Thang",
                "lastUpdated":"3/27/2014 05:22:35",
                "owner":
                {
                    "id":1,
                    "firstName":"Joe",
                    "lastName":"Scmoe
                },
                "requiredSkills" : [
                    {
                        "id":1,
                        "name": "Lasers",
                        "description": "Laser related techniques"
                    },
                    {
                        "id":2,
                        "name": "Blasting",
                        "description": "Blasting related techniques"
                    }
                ],
                "members": [
                    {
                        "id": 6,
                        "firstName": "Alain",
                        "lastName": "Kuchta"
                    }
                ],
                "picture":"/images/123.jpg"
            },
            {
                "id":3,
                "name": "ThisIsMyProj",
                "subName": "AndSubname",
                "description":"Thang",
                "lastUpdated":"3/27/2014 05:22:35",
                "owner":
                {
                    "id":1,
                    "firstName":"Joe",
                    "lastName":"Scmoe
                },
                "requiredSkills" : [
                    {
                        "id":1,
                        "name": "Lasers",
                        "description": "Laser related techniques"
                    },
                    {
                        "id":2,
                        "name": "Blasting",
                        "description": "Blasting related techniques"
                    }
                ],
                "members": [
                    {
                        "id": 6,
                        "firstName": "Alain",
                        "lastName": "Kuchta"
                    }
                ],
                "picture":"/images/123.jpg"
            }
        ]


## Project [/projects/{id}]

### Attributes
<table><th align="left">
        Name</th><th align="left">
                             Description</th></tr>
<tr><td>id</td>          <td>ID of the project (<em>server assigned on create</em>)</td></tr>
<tr><td>name</td>        <td>Name of the project</td></tr>
<tr><td>subName</td>     <td>Tag line for the project</td></tr>
<tr><td>description</td> <td>Description of the project</td></tr>
<tr><td>owner</td>       <td>Project owner ID</td></tr>
<tr><td>picture</td>     <td>picture for project</td></tr>
<tr><td>requiredSkills</td><td>An array of Skill objects which are the skills required for the project</td></tr>
<tr><td>members</td>       <td>An array of User objects containing only id,firstName, and lastName</td></tr>
<tr><td>created</td>     <td>Date project created (<em>server assigned on create</em>)</td></tr>
<tr><td>lastUpdated</td> <td>Date project last updated (<em>server assigned on create/update</em>)</td></tr>
</table>


###Affordances
+ These are functions used as HTTP requests (client &rarr; server):
+ 'GET' ... gets the specified project by ID
+ 'PUT' ... Update a project
+ 'DELETE' ... Delete a project

+ Parameters
    + id (optional, int, `1`) ... Numeric `id` of the folder to perform action with.
    

### Retrieve a single project [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Ultra Blaster 7",
            "description": "Ultra Blaster 7 is a high intensity rabbit emulsification simulation.",
            "created_at": "2014-07-18T13:12:45.676Z",
            "updated_at": "2014-07-19T23:59:58.046Z",
            "picture": null,
            "subName": "Blasting better than before!",
            "owner": {
                "id": 6,
                "firstName": "Alain",
                "lastName": "Kuchta"
            },
            "requiredSkills": [
                {
                    "id": 1,
                    "name": "Dancing",
                    "description": "Kind of gay"
                },
                {
                    "id": 2,
                    "name": "lasers",
                    "description": "Fucking lasers man"
                }
            ],
            "members": [
                {
                    "id": 6,
                    "firstName": "Alain",
                    "lastName": "Kuchta"
                }
            ]
        }
    
### Update a project [PUT]
Using PUT implies replacing values of fields you include in the request.

Example:  
If you include `"name" : "Awesome Project"` in the JSON object, the new name of the project will be
`Awesome Project`
+ Request
    
        {
            "id": 1,
            "name": "Ultra Blaster 7",
            "description": "Ultra Blaster 7 is a high intensity rabbit emulsification simulation.",
            "created_at": "2014-07-18T13:12:45.676Z",
            "updated_at": "2014-07-19T23:59:58.046Z",
            "picture": null,
            "subName": "Blasting better than before!",
            "owner": {
                "id": 6,
                "firstName": "Alain",
                "lastName": "Kuchta"
            },
            "requiredSkills": [
                {
                    "id": 1,
                    "name": "Dancing",
                    "description": "Kind of gay"
                },
                {
                    "id": 2,
                    "name": "lasers",
                    "description": "Fucking lasers man"
                }
            ],
            "members": [
                {
                    "id": 6,
                    "firstName": "Alain",
                    "lastName": "Kuchta"
                }
            ]
        }
            

+ Response 202 (application/json)


### Delete a project [DELETE]
+ Response 202 (application/json)

# Group Roles

## Roles [/roles/{id}]

### Attributes
<table>
<tr><th align="left">
        Name</th><th align="left">
                             Description</th></tr>
<tr><td>id</td>          <td>ID of the role (<em>server assigned on create</em>)</td></tr>
<tr><td>name</td>        <td>Name of the role</td></tr>
<tr><td>description</td> <td>Description of the role</td></tr>
<tr><td>created</td>     <td>Date role created (<em>server assigned on create</em>)</td></tr>
<tr><td>lastUpdated</td> <td>Date role last updated (<em>server assigned on create/update</em>)</td></tr>
</table>

###Affordances
+ These are functions used as HTTP requests (client &rarr; server):
+ 'GET' ... gets the specified role by ID
+ 'PUT' ... Create or update a role
+ 'DELETE' ... Delete a role

+ Parameters
    + id (optional, int, `1`) ... Numeric `id` of the folder to perform action with.

### Retrieve a single role [GET]
+ Response 200 (application/json)

        {
            "id":5,
            "name": "Marmot Wrangler",
            "description": "The team member who wrangles the marmot(s)",
            "created": "3/27/2014 05:22:35",
            "lastUpdated": "3/27/2014 05:22:35",
        }


### Create or update a role [PUT]
+ Request

        {
            "name": "Keeper of the Keys",
            "description": "The team member who keeps the key(s)"
        }

+ Response 202 (application/json)


### Delete a role [DELETE]
+ Response 204 (application/json)

