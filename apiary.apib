FORMAT: 1A
HOST: http://www.google.com

# TeamMachine
Team Machine

# Group Projects
Notes related resources of the **Projects API**




## TeamMachine API [/]
The API Entry point - Main node;
No attributes - only root API affordances

### Affordances
+ 'show' ('self') ... API entry point
+ 'projects' ... Lists all projects
+ 'users' ... Lists all users
+ 'skills' ... Contains all skills
+ 'roles' ... Contains all roles, 

### Retrieve API Root [GET]
+ Response 200 (application/json)

        {
            "self": {"href": "/"},
            "projects": {"href": "/projects"},
            "users": {"href": "/users"},
            "roles": {"href": "/roles"},
            "skills": {"href": "/skills"}
        }









## User Collection [/users]
All users are stored here with unique identifiers

### Attributes
+ 'id' ... user id assigned by server

### Affordances


### Create a new user [POST]
+ Response 201 (application/json)

### Get all users base info [GET]
+ Response 200 (application/json)

        [
            {"id":"1","firstName":"Nick","lastName":"Malott","picture":{"href":"/images/123.jpg"},"location":"Cincinnati","skillset":["lasers","cannons","lasercannons","popcorn"]},
            {"id":"2","firstName":"Matt","lastName":"Joe","picture":{"href":"/images/3123.jpg"},"location":"Chicaaaaaaago","skillset":["toilet economics"]},
            {"id":"43","firstName":"Mick","lastName":"Jagger","picture":{"href":"/images/3.jpg"},"location":"Hell","skillset":["Tofu","Not Tofu"]},
            {"id":"4333","firstName":"John","lastName":"Jacob","picture":{"href":"/images/123.jpg"},"location":"Jingle","skillset":["Heimer","Schmidt"]}
        ]





## Individual User [/users/{id}]

### Attributes
+ 'id' ... ID of the user, server assigned
+ 'firstName' ... user first name
+ 'lastName' ... user last name
+ 'email' ... user registered email
+ 'location' ... user location
+ 'skills' ... user skills
+ 'picture' ... string representation of picture?
+ 'projects' ... projects user is involved in currently
+ 'bio' ... short profile bio
+ 'status' ... status for a user
+ 'prevProj' ... previous projects the user has been involved in

### Affordances
+ 'show' ('self') ... A single user object
+ 'edit' ... Update or delete a user

+ Parameters
    + id (required, int, `1`) ... id of the user to retrieve

+ Model
        
### Retrieve a user [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "name": "nick",
            "email":"n@m.co",
            "location":"?",
            "skillset":["lasers","cannons","Lasercannons","kitten cannons","Canonical References"]
            "pic":{"href": "/images/123.jpg"}
            "projects":["ProjectID1","ProjectID2","ProjectID4"]
            "bio":"thisisabio"
            "prevProj":["ProjectID3","ProjectID5"]
        }
        
### Delete a user by id [DELETE]
+ Response 202

### Update a user by id [PUT]
+ Response 202




## User Experience [/users/{id}/experience]
Location of user's expeience/skills

### Attributes
+ skill ... [{"id":"level"},{...},{...}]

### Affordances
+ 'add' (post) ... add an experience to the user
+ 'show' (get) ... get all experience of a user

+ Parameters
    + id (required, init,`1`) ... id of the user to retrieve

### 'Show' [GET]
+ Response 200 (application/json)
        
        {
            "skill":[{"12":"2"},
                    {"109":"5"},
                    {"123":"9"}]
        }

### Update Experience [PUT]
+ Response 202

### Add Skill to skillset [POST]
+ Response 201

### Delete skill from skillset [DELETE]
+ Response 202







## Roles Collection [/roles]
Collection of all roles

### Attributes


### Affordances


### Retrieve a profile [GET]
 + Response 200 (application/json)








## Skills Collection [/skills]
Master list of all skills

###Attributes
+ 'id' ... ID of the skill, server assigned

###Affordances
+ 'show' ('self') ... Show all skills

+ Model (application/json)

### Get all skills [GET]

+ Response 200 (application/json)












## Project Collection [/projects]
All projects are stored here with unique identifiers

###Attributes
+ 'id' ... ID of the project, server assigned

###Affordances
+ 'show' ('self') ... Show all projects

+ Model (application/json)

### Get all projects [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "title": "LaserCannons",
                "description":"It will be large and destructive",
                "compentencies":["lasers","cannons"]
            },
            {
                "id": 2,
                "title": "KittenCannons",
                "description":"It will be small and fluffy",
                "compentencies":["kittens","cannons"]
            }
        ]


## Projects [/projects/{id}]
Where all the uncool projects are.

### Attributes
+ 'id' ... ID of the project, server assigned
+ 'name' ... Name of the project
+ 'subName' ... Tag line for the project
+ 'description' ... Description of the project
+ 'meta' ... Catch all


###Affordances
+ 'show' ('self') ... A single project
+ 'edit' ... Update or delete a project

+ Parameters
    + id (optional, int, `1`) ... Numeric `id` of the folder to perform action with. Has example value.
    
+ Model (application/json)
       
### Retrieve a single project [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "title": "LaserCannons",
                "description":"It will be large and destructive",
                "compentencies":["lasers","cannons"]
            }
        ]

### Create a Project [POST]
+ Request (application/json)

        { 
            "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

