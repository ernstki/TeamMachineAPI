FORMAT: 1A
HOST: http://www.google.com

# TeamMachine API v0.3
Team Machine API Specification

#####v0.3: Removing Request Bodies (Get/Delete); Updating Search Params; adding name/id to proj. owner, various updates
#####v0.2: Initial Build Release
#####v0.1: Creation of Apiary Project


# Group Root
Resources of the **Projects API**

## TeamMachine API [../]
+ The API Entry point - Main node;
+ No attributes - No Affordances
+ API Definition

#### Definitions:
+ Attributes: Stored properties of the URI
+ Affordances: These are functions used as HTTP requests (client -> server):
+ Search Parameters: Used to query server to search DB



# Group Users

## User Collection [/users]
+ Root collection of all users

### Attributes
+ 'id' ... Subset of each user within collection
+ 'firstName' ... user first name
+ 'lastName' ... user last name
+ 'email' ... user registered email
+ 'location' ... user location
+ 'skillset' ... set of user skills
+ 'picture' ... string representation of picture?
+ 'projects' ... projects user is involved in currently
+ 'bio' ... short profile bio
+ 'status' ... status for a user
+ 'prevProj' ... previous projects the user has been involved in

### Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... search for user(s) with query parameters (Returns [id, firstName, lastName, picture, location, skillset])
+ 'POST' ... Create a new user

###Search Parameters
Search is accomplished by including a hash in the query params called *search*. This hash contains key value pairs where the key is the name of the filter to use and the value is the value to filter on.
below are the filter names. DO NOT use quotes around values.

* Parameters -- Append `?search[filter_name]=value&search[another_filter]=anothervalue` to URI
    * firstname_like (optional, string, `John`) ... search users by first name containing `John`
    * lastName_like (optional, string, `Mots`) ... search users by last name containing `Mots`
    * email_like (optional, string, `mots@john.com`) ... search users by email containing `mots@john.com`
    * location_like (optional, string, `Cincinnati`) ... search users by location containing `Cincinnati`
    * skill_like (optional, string, `Android`) ... search users by a skill containing `Android`
    * projects_like (optional, string, `Lasers`) ... search users by active projects containing `Lasers`
    * prevProjects_like (optional, string, `suchAProject`) ... search users by previous projects containing `suchAProject`

### Get all users base info - Intended for use with search [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "firstName": "Nick",
            "lastName": "Malott",
            "picture": "/images/123.jpg",
            "location": "Cincinnati",
            "skillset": [
                "lasers",
                "cannons",
                "lasercannons",
                "popcorn"
            ]
        },
        {
            "id": 2,
            "firstName": "Matt",
            "lastName": "Joe",
            "picture": "/images/3123.jpg",
            "location": "Chicaaaaaaago",
            "skillset": [
                "toilet economics"
            ]
        },
        {
            "id": 43,
            "firstName": "Mick",
            "lastName": "Jagger",
            "picture": "/images/3.jpg",
            "location": "Hell",
            "skillset": [
                "Tofu",
                "Not Tofu"
            ]
        },
        {
            "id": 4333,
            "firstName": "John",
            "lastName": "Jacob",
            "picture": "/images/123.jpg",
            "location": "Jingle",
            "skillset": [
                "Heimer",
                "Schmidt"
            ]
        }
        
### Create a new user [POST]
+ Request

        {
            "firstName": "John",
            "lastName": "Jacob",
            "picture": "/images/123.jpg",
            "location": "Jingle",
            "skillset": [
                "Heimer",
                "Schmidt"
            ]
        }

+ Response 201 (application/json)

        {
            "id": 4333
        }
        

## Individual User [/users/{id}]

### Attributes
+ 'id' ... ID of the user, server assigned
+ 'firstName' ... user first name
+ 'lastName' ... user last name
+ 'email' ... user registered email
+ 'location' ... user location
+ 'skillset' ... set of user skills
+ 'picture' ... string representation of picture?
+ 'projects' ... projects user is involved in currently
+ 'bio' ... short profile bio
+ 'status' ... status for a user
+ 'prevProj' ... previous projects the user has been involved in

### Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... Retrieve a user
+ 'PUT' ... Update a user
+ 'DELETE' ... Delete a user

+ Parameters
    + id (required, int, `1`) ... id of the user to retrieve

        
### Retrieve a single user [GET]
+ Response 200 (application/json)

        {
            "id": 4,
            "firstName": "nick",
            "lastName": "malott",
            "email":"n@m.co",
            "location":"?",
            "skillset":["lasers","cannons","Lasercannons","kitten cannons","Canonical References"],
            "picture":"/images/123.jpg",
            "projects":[1,2,3],
            "bio":"thisisabio",
            "status":"Looking",
            "prevProj":[4,5]
        }
        
### Delete a user by id [DELETE]
+ Response 202 (application/json)

### Update a user by id [PUT]
+ Request
    
        {
            "id": 1,
            "firstName": "nick",
            "lastName": "malott",
            "email":"n@m.co",
            "location":"?",
            "skillset":["lasers","cannons","Lasercannons","kitten cannons","Canonical References"],
            "picture":"/images/123.jpg",
            "projects":[1,2,3],
            "bio":"thisisabio",
            "status":"Working, bruh",
            "prevProj":[4,5]
        }

    
+ Response 202 (application/json)






# Group Skills

## Skills Collection [/skills/]
Master list of all skills

###Attributes
+ 'id' ... ID of the skill, server assigned
+ 'name' ... name of the skill, server assigned
+ 'description' ... description of the skill

###Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... retrieve all skills - used for search
+ 'POST' ... Add a skill

###Search Parameters
Search is accomplished by including a hash in the query params called *search*. This hash contains key value pairs where the key is the name of the filter to use and the value is the value to filter on.
below are the filter names. DO NOT use quotes around values.

* Parameters -- Append `?search[filter_name]=value&search[another_filter]=anothervalue` to URI
    * skill_like (optional, string, `Android') ... search skills by skill name containing 'Android'

### Get all skills - Used for search [GET]
+ Response 200 (application/json)
    
        {
            {
                "id":229,
                "name":"Android UI Development",
                "description": "Development of custom screens for Android applications"
            },
            {
                "id":22894,
                "name":"Karate",
                "description": "Kicking and screaming",
            }
        }

### Create a new Skill [POST]
+ Request (application/json)

        {
            "name":"Lasers",
            "description": "Lasers and stuff"
        }

+ Response 200 (application/json)
    
        {
            "id":209"
        }


## Skill [/skills/{id}]
Individual skill within collection of all skills

###Attributes
+ 'id' ... ID of the skill, server assigned
+ 'name' ... name of the skill, server assigned
+ 'description' ... description of the skill

###Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... retrieve a single skill

+ Parameters
    + id (optional, int, `1`) ... id of the skill

            
### Retrieve a single Skill [GET]
+ Response 200 (application/json)

        {
            "id":344,
            "name":"Android UI Development",
            "description": "Development of custom screens for Android applications"
        }






# Group Projects

## Project Collection [/projects]
All projects are stored here with unique identifiers

###Attributes
+ 'id' ... ID of the project, server assigned
+ 'name' ... Name of the project
+ 'subName' ... Tag line for the project
+ 'description' ... Description of the project
+ 'created' ... Date project created
+ 'lastUpdated' ... Date project last updated
+ 'owner' ... Project owner ID/name
+ 'picture' ... picture for project

###Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... Get all projects - Used for search

###Search Parameters
Search is accomplished by including a hash in the query params called *search*. This hash contains key value pairs where the key is the name of the filter to use and the value is the value to filter on.
below are the filter names. DO NOT use quotes around values.

* Parameters -- Append `?search[filter_name]=value&search[another_filter]=anothervalue` to URI
    * name_like (optional, string, `Kitten`) ... search for projects whose name contains `Kitten`
    * subName_like (optional, string, `Kitten`) ... search projects who name contains `Kitten`
    * updated_since (optional, string, `2014-07-10T18:38:34.389Z`) ... search for projects whose last updated date is after `2014-07-10T18:38:34.389Z`
    * owner_id_is (optional, string, `1`) ... search projects whose owner id is `1`

### Get all projects - Used for search [GET]
+ Response 200 (application/json)

        [
            {
                "id":2,
                "name": "ThisIsMyProj",
                "subname": "AndSubname",
                "description":"Thang",
                "competencies":["defi","AndSame"],
                "lastUpdated":"3/27/2014 05:22:35",
                "owner":
                {
                    "id":1,
                    "name":"Joe Schmoe"
                
                },
                "picture":"/images/123.jpg"
            },
            {
                "id":3,
                "name": "ThisIsMyProj",
                "subname": "AndSubname",
                "description":"Thang",
                "competencies":["defi","AndSame"],
                "lastUpdated":"3/27/2014 05:22:35",
                "owner":
                {
                    "id":3,
                    "name":"John Schmoe"
                
                },
                "picture":"/images/123.jpg"
            },
            {
                "id":5,
                "name": "ThisIsMyProj",
                "subname": "AndSubname",
                "description":"Thang",
                "competencies":["defi","AndSame"],
                "lastUpdated":"3/27/2014 05:22:35",
                "owner":
                {
                    "id":12,
                    "name":"Joe Toe"
                
                },
                "picture":"/images/123.jpg"
            }
        ]




## Projects [/projects/{id}]

### Attributes
+ 'id' ... ID of the project, server assignedj
+ 'name' ... Name of the project
+ 'subName' ... Tag line for the project
+ 'description' ... Description of the project
+ 'created' ... Date project created
+ 'lastUpdated' ... Date project last updated
+ 'owner' ... Project owner ID
+ 'picture' ... picture for project

###Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... gets the specified project by ID
+ 'PUT' ... Update a project
+ 'DELETE' ... Delete a project

+ Parameters
    + id (optional, int, `1`) ... Numeric `id` of the folder to perform action with.
    

### Retrieve a single project [GET]
+ Response 200 (application/json)

        {
            "id":5,
            "name": "ThisIsMyProj",
            "subname": "AndSubname",
            "description":"Thang",
            "competencies":["defi","AndSame"],
            "lastUpdated":"3/27/2014 05:22:35",
            "owner":
                {
                    "id":1,
                    "name":"Joe Schmoe"
                
                },
            "picture":"/images/123.jpg"
        }


### Update a project [PUT]
+ Request
    
        {
            "id":2,
            "name": "NewTitle",
            "subname": "ButSameSubname",
            "description":"ThisMayRemainUnchanged",
            "competencies":["same","AndSame"],
            "lastUpdated":"NOW"
            "owner":
                {
                    "id":1,
                    "name":"Joe Schmoe"
                
                },
            "picture":"/images/123.jpg"
        }
            

+ Response 202 (application/json)


### Delete a project [DELETE]
+ Response 202 (application/json)

