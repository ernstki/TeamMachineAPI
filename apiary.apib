FORMAT: 1A
HOST: http://www.google.com

# TeamMachine
Team Machine

# Group Projects
Resources of the **Projects API**




## TeamMachine API [/]
+ The API Entry point - Main node;
+ No attributes - only root API affordances

### Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... Give version info, paths

### Retrieve API Root [GET]
+ Response 200 (application/json)

        {
            "self": {"href": "/"},
            "projects": {"href": "/projects"},
            "users": {"href": "/users"},
            "roles": {"href": "/roles"},
            "skills": {"href": "/skills"}
        }



## User Collection [/users]
+ Root collection of all users

### Attributes
+ 'id' ... Subset of each user within collection

### Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... search for user(s) with query parameters (Returns [id, firstName, lastName, picture, location, skillset])
+ 'POST' ... Create a new user

### Create a new user [POST]
+ Response 201 (application/json)

### Get all users base info [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "firstName": "Nick",
                "lastName": "Malott",
                "picture": {
                    "href": "/images/123.jpg"
                },
                "location": "Cincinnati",
                "skillset": [
                    "lasers",
                    "cannons",
                    "lasercannons",
                    "popcorn"
                ]
            },
            {
                "id": 2,
                "firstName": "Matt",
                "lastName": "Joe",
                "picture": {
                    "href": "/images/3123.jpg"
                },
                "location": "Chicaaaaaaago",
                "skillset": [
                    "toilet economics"
                ]
            },
            {
                "id": 43,
                "firstName": "Mick",
                "lastName": "Jagger",
                "picture": {
                    "href": "/images/3.jpg"
                },
                "location": "Hell",
                "skillset": [
                    "Tofu",
                    "Not Tofu"
                ]
            },
            {
                "id": 4333,
                "firstName": "John",
                "lastName": "Jacob",
                "picture": {
                    "href": "/images/123.jpg"
                },
                "location": "Jingle",
                "skillset": [
                    "Heimer",
                    "Schmidt"
                ]
            }
        ]

## Individual User [/users/{id}]

### Attributes
+ 'id' ... ID of the user, server assigned
+ 'firstName' ... user first name
+ 'lastName' ... user last name
+ 'email' ... user registered email
+ 'location' ... user location
+ 'skills' ... user skills
+ 'picture' ... string representation of picture?
+ 'projects' ... projects user is involved in currently
+ 'bio' ... short profile bio
+ 'status' ... status for a user
+ 'prevProj' ... previous projects the user has been involved in

### Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'GET' ... Retrieve a user
+ 'PUT' ... Update a user
+ 'DELETE' ... Delete a user

+ Parameters
    + id (required, int, `1`) ... id of the user to retrieve

        
### Retrieve a user [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "name": "nick",
            "email":"n@m.co",
            "location":"?",
            "skillset":["lasers","cannons","Lasercannons","kitten cannons","Canonical References"],
            "picture":{"href": "/images/123.jpg"},
            "projects":[1,2,3],
            "bio":"thisisabio",
            "prevProj":[4,5]
        }
        
### Delete a user by id [DELETE]
+ Response 202

### Update a user by id [PUT]
+ Response 202




## User Experience [/users/{id}/experience]
Location of user's expeience/skills

### Attributes
+ proficiency ... [{"id":"level"},{...},{...}]

### Affordances
+ These are functions used as HTTP requests (client -> server):
+ POST ... add an experience to the user
+ GET ... get all experience of a user

+ Parameters
    + id (required, init,`1`) ... id of the user to retrieve

### 'Show' [GET]
+ Response 200 (application/json)
        
        {
            "proficiency":[[{"id":12},{"level":2}],
                    [{"id":356},{"level":7}],
                    [{"id":122},{"level":9}]]
        }

### Update Experience [PUT]
+ Response 202

### Add Skill to skillset [POST]
+ Response 201

### Delete skill from skillset [DELETE]
+ Response 202







## Roles Collection [/roles]
Collection of all roles

### Attributes


### Affordances
+ These are functions used as HTTP requests (client -> server):


### Search Roles [GET]
 + Response 200 (application/json)
    
        {
            "skills":[{12:2},
                    {109:5},
                    {123:9}]
        }






## Skills Collection [/skills]
Master list of all skills

###Attributes
+ 'id' ... ID of the skill, server assigned

###Affordances
+ These are functions used as HTTP requests (client -> server):
+ [GET] ... Search skills
+ [POST] ... create new skill


### Search skills [GET]
+ Response 200 (application/json)





## Individual skill [/skills/{id}]
Individual skill within coollection of all skills

###Attributes
+ 'id' ... ID of the skill, server assigned
+ 'skill' ... name of the skill, server assigned
+ 'description' ... description of the skill






## Project Collection [/projects]
All projects are stored here with unique identifiers

###Attributes
+ 'id' ... ID of the project, server assigned

###Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'show' ('self') ... Show all projects

+ Model (application/json)

### Search all projects [GET]
+ Response 200 (application/json)

        [
            {
                "id": 34,
                "name": "LaserCannon V0.1",
                "subName": "A cannon for lasers",
                "created": "June 10th, 2014",
                "manager": "Alain Kuchta"
            },
            {
                "id": 22,
                "firstName": "Matt",
                "lastName": "Joe",
                "picture": {
                    "href": "/images/3123.jpg"
                },
                "location": "Chicaaaaaaago",
                "skillset": [
                    "toilet economics"
                ]
            },
            {
                "id": 493,
                "firstName": "Mick",
                "lastName": "Jagger",
                "picture": {
                    "href": "/images/3.jpg"
                },
                "location": "Hell",
                "skillset": [
                    "Tofu",
                    "Not Tofu"
                ]
            },
            {
                "id": 8008135,
                "firstName": "John",
                "lastName": "Jacob",
                "picture": {
                    "href": "/images/123.jpg"
                },
                "location": "Jingle",
                "skillset": [
                    "Heimer",
                    "Schmidt"
                ]
            }
        ]


## Projects [/projects/{id}]
Where all the uncool projects are.

### Attributes
+ 'id' ... ID of the project, server assigned
+ 'name' ... Name of the project
+ 'subName' ... Tag line for the project
+ 'created' ... Date project created
+ 'lastUpdated' ... Date project last updated
+ 'manager' ... Project manager/owner
+ 'description' ... Description of the project
+ 'picture' ... picture for project
+ 'meta' ... Catch all


###Affordances
+ These are functions used as HTTP requests (client -> server):
+ 'show' ('self') ... A single project
+ 'edit' ... Update or delete a project

+ Parameters
    + id (optional, int, `1`) ... Numeric `id` of the folder to perform action with. Has example value.
    
+ Model (application/json)
       
### Retrieve a single project [GET]
+ Response 200 (application/json)

        {
            "id": 1,
            "title": "LaserCannons",
            "description":"It will be large and destructive",
            "compentencies":["lasers","cannons"]
        }

### Create a Project [POST]
+ Request (application/json)

        { 
            "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

